NDSummary.OnToolTipsLoaded("File:NetSparkle/SparkleUpdaterEvents.cs",{654:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype654\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">NetSparkleUpdater.</span>&#8203;SparkleUpdater</div></div></div></div>",656:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype656\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> LoopStartedOperation LoopStarted</div><div class=\"TTSummary\">This event will be raised when an update check is about to be started</div></div>",657:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype657\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> LoopFinishedOperation LoopFinished</div><div class=\"TTSummary\">This event will be raised when an update check has finished</div></div>",658:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype658\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> UpdateCheckStarted UpdateCheckStarted</div><div class=\"TTSummary\">Called when update check has just begun</div></div>",659:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype659\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> UpdateDetected UpdateDetected</div><div class=\"TTSummary\">This event can be used to override the standard user interface process when an update is detected</div></div>",660:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype660\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> UpdateCheckFinished UpdateCheckFinished</div><div class=\"TTSummary\">Called when update check is all done. UpdateDetected may have been called between the start and end of the update check.</div></div>",661:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype661\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> UserRespondedToUpdate UserRespondedToUpdate</div><div class=\"TTSummary\">The user responded to the update UI with a given response.&nbsp; This is called _after_ NetSparkle handles the response in all cases EXCEPT when the result is UpdateAvailableResult.InstallUpdate -- in that case, this event is called BEFORE downloading the update begins.</div></div>",662:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype662\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadEvent DownloadStarted</div><div class=\"TTSummary\">Called when the download of an app cast file has just started</div></div>",663:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype663\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadEvent DownloadCanceled</div><div class=\"TTSummary\">Called when the download of an app cast file has been canceled</div></div>",664:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype664\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadErrorEvent DownloadHadError</div><div class=\"TTSummary\">Called when the download of an app cast file has downloaded but has an error other than corruption</div></div>",665:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype665\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> ItemDownloadProgressEvent DownloadMadeProgress</div><div class=\"TTSummary\">Called when the download of an app cast file has made some progress.&nbsp; This data is also sent to the progress window if one is available.</div></div>",666:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype666\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadEvent DownloadFinished</div><div class=\"TTSummary\">Called when the downloaded file is fully downloaded and verified regardless of the value for SilentMode. Note that if you are installing fully silently, this will be called before the install file is executed, so don\'t manually initiate the file or anything. Useful when using SilentModeTypes.DownloadNoInstall so you can let your user know when the downloaded update is ready.</div></div>",667:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype667\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadEvent DownloadedFileIsCorrupt</div><div class=\"TTSummary\">Called when the downloaded file is already downloaded (or at least partially on disk) and the DSA signature doesn\'t match. When this is called, Sparkle is not taking any further action to try to download the install file during this instance of the software. In order to make Sparkle try again, you must delete the file off disk yourself. Sparkle will try again after the software is restarted. This event could allow you to tell the user what happened if updates are silent.</div></div>",668:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype668\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> DownloadEvent DownloadedFileThrewWhileCheckingSignature</div><div class=\"TTSummary\">Called when the downloaded file is fully downloaded and has its signature checked, but something went wrong during the signature check.&nbsp; If you\'re sure the file is there, you can try verifying the file again AND triggering an install with SparkleUpdater.InstallUpdate, but make sure to warn your users first!</div></div>",669:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype669\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> CancelEventHandler PreparingToExit</div><div class=\"TTSummary\">Subscribe to this event to get a chance to shut down gracefully before the application is closed.&nbsp; If PreparingToExitAsync is set, this has no effect.</div></div>",670:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype670\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> CancelEventHandlerAsync PreparingToExitAsync</div><div class=\"TTSummary\">Subscribe to this event to get a chance to asynchronously shut down gracefully before the application is closed.&nbsp; This overrides PreparingToExit.</div></div>",671:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype671\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> CloseApplication CloseApplication</div><div class=\"TTSummary\">Event for custom shutdown logic. If this is set, it is called instead of Application.Current.Shutdown or Application.Exit.&nbsp; If CloseApplicationAsync is set, this has no effect.</div></div>",672:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype672\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public event</span> CloseApplicationAsync CloseApplicationAsync</div><div class=\"TTSummary\">Event for asynchronous custom shutdown logic. If this is set, it is called instead of Application.Current.Shutdown or Application.Exit.&nbsp; This overrides CloseApplication.</div></div>"});