NDSummary.OnToolTipsLoaded("File:NetSparkle/SparkleUpdater.cs",{546:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype546\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">NetSparkleUpdater.</span>&#8203;SparkleUpdater</div></div></div><div class=\"TTSummary\">Class to communicate with a sparkle-based appcast to download and install updates to an application</div></div>",548:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype548\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">protected</span> Process _installerProcess</div><div class=\"TTSummary\">The Process responsible for launching the downloaded update.&nbsp; Only valid once the application is about to quit and the update is going to be launched.</div></div>",549:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype549\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> ILogger _logWriter</div></div>",550:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype550\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly</span> Task _taskWorker</div></div>",551:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype551\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> CancellationToken _cancelToken</div></div>",552:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype552\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly</span> CancellationTokenSource _cancelTokenSource</div></div>",553:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype553\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly</span> SynchronizationContext _syncContext</div></div>",554:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype554\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly string</span> _appReferenceAssembly</div></div>",555:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype555\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> _doInitialCheck</div></div>",556:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype556\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> _forceInitialCheck</div></div>",557:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype557\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly</span> EventWaitHandle _exitHandle</div></div>",558:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype558\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private readonly</span> EventWaitHandle _loopingHandle</div></div>",559:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype559\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> TimeSpan _checkFrequency</div></div>",560:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype560\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> _tmpDownloadFilePath</div></div>",561:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype561\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private string</span> _downloadTempFileName</div></div>",562:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype562\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> AppCastItem _itemBeingDownloaded</div></div>",563:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype563\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> _hasAttemptedFileRedownload</div></div>",564:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype564\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> UpdateInfo _latestDownloadedUpdateInfo</div></div>",565:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype565\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> IUIFactory _uiFactory</div></div>",566:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype566\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> _disposed</div></div>",567:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype567\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> Configuration _configuration</div></div>",569:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype569\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> SparkleUpdater(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">appcastUrl,</td></tr><tr><td class=\"PType first\">ISignatureVerifier&nbsp;</td><td class=\"PName last\">signatureVerifier</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Constructor which requires the app cast url and the object that will verify app cast signatures</div></div>",570:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype570\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> SparkleUpdater(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">appcastUrl,</td></tr><tr><td class=\"PType first\">ISignatureVerifier&nbsp;</td><td class=\"PName last\">signatureVerifier,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">referenceAssembly</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">ctor which needs the app cast url, an object to verify app cast signatures, and a reference assembly</div></div>",571:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype571\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> SparkleUpdater(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">appcastUrl,</td></tr><tr><td class=\"PType first\">ISignatureVerifier&nbsp;</td><td class=\"PName last\">signatureVerifier,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">referenceAssembly,</td></tr><tr><td class=\"PType first\">IUIFactory&nbsp;</td><td class=\"PName last\">factory</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Constructor that performs all necessary initialization for software update checking</div></div>",573:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype573\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> SecurityProtocolType SecurityProtocolType { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The security protocol used by NetSparkle. Setting this property will also set this for the current AppDomain of the caller. Needs to be set to SecurityProtocolType.Tls12 for some cases (such as when downloading from GitHub).</div></div>",574:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype574\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> UserInteractionMode UserInteractionMode { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Set the user interaction mode for Sparkle to use when there is a valid update for the software</div></div>",575:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype575\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> TmpDownloadFilePath { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">If set, downloads files to this path. If the folder doesn\'t already exist, creates the folder at download time (and not before).&nbsp; Note that this variable is a path, not a full file name.</div></div>",576:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype576\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> RelaunchAfterUpdate { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Defines if the application needs to be relaunched after executing the downloaded installer</div></div>",577:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype577\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> CustomInstallerArguments { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Run the downloaded installer with these arguments</div></div>",578:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype578\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Action ClearOldInstallers { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Function that is called asynchronously to clean up old installers that have been downloaded with SilentModeTypes.DownloadNoInstall or SilentModeTypes.DownloadAndInstall.</div></div>",579:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype579\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> IsUpdateLoopRunning { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Whether or not the update loop is running</div></div>",580:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype580\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> IUIFactory UIFactory { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Factory for creating UI elements like progress window, etc.</div></div>",581:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype581\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> IUpdateAvailable UpdateAvailableWindow { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The user interface that shows the release notes and asks the user to skip, remind me later, or update</div></div>",582:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype582\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> IDownloadProgress ProgressWindow { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The user interface that shows a download progress bar, and then asks to install and relaunch the application</div></div>",583:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype583\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private</span> ICheckingForUpdates CheckingForUpdatesWindow { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The user interface that shows the \'Checking for Updates...\' UIrm.</div></div>",584:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype584\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> Configuration Configuration { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The configuration object for a given assembly that has information on when updates were checked last, any updates that have been skipped, etc.</div></div>",585:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype585\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ISignatureVerifier SignatureVerifier { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The object that verifies signatures (DSA, Ed25519, or otherwise) of downloaded items</div></div>",586:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype586\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public string</span> AppCastUrl { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Gets or sets the app cast URL</div></div>",587:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype587\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> UseNotificationToast { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Specifies if you want to use the notification toast message (not implemented in all UIs).</div></div>",588:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype588\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> ShowsUIOnMainThread { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">This setting is only valid on WinForms and WPF.&nbsp; If true, tries to run UI code on the main thread using SynchronizationContext.&nbsp; Must be set to true if using NetSparkleUpdater from Avalonia.</div></div>",589:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype589\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> ILogger LogWriter { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Object that handles any diagnostic messages for NetSparkle.&nbsp; If you want to use your own class for this, you should just need to override LogWriter.PrintMessage in your own class.&nbsp; Make sure to set this object before calling StartLoop(bool) to guarantee that all messages will get sent to the right place!</div></div>",590:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype590\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> CheckServerFileName { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">Whether or not to check with the online server to verify download file names.</div></div>",591:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype591\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> List&lt;AppCastItem&gt; LatestAppCastItems { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Returns the latest appcast items to the caller. Might be null.</div></div>",592:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype592\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public bool</span> UpdateMarkedCritical { <span class=\"SHKeyword\">get</span> }</div><div class=\"TTSummary\">Loops through all of the most recently grabbed app cast items and checks if any of them are marked as critical</div></div>",593:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype593\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> IUpdateDownloader UpdateDownloader { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The object responsable for downloading update files for your application</div></div>",594:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype594\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> IAppCastDataDownloader AppCastDataDownloader { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The object responsible for downloading app cast and app cast signature information for your application</div></div>",595:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype595\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public</span> IAppCastHandler AppCastHandler { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div><div class=\"TTSummary\">The object responsible for parsing app cast information and checking to see if any updates are available in a given app cast</div></div>",597:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype597\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> StartLoop(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">doInitialCheck</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Starts a SparkleUpdater background loop to check for updates every 24 hours.</div></div>",598:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype598\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> StartLoop(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">doInitialCheck,</td></tr><tr><td class=\"PType first\">TimeSpan&nbsp;</td><td class=\"PName last\">checkFrequency</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Starts a SparkleUpdater background loop to check for updates on a given interval.</div></div>",599:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype599\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> StartLoop(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">doInitialCheck,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">forceInitialCheck</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Starts a SparkleUpdater background loop to check for updates every 24 hours.</div></div>",600:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype600\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public async void</span> StartLoop(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">doInitialCheck,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">forceInitialCheck,</td></tr><tr><td class=\"PType first\">TimeSpan&nbsp;</td><td class=\"PName last\">checkFrequency</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Starts a SparkleUpdater background loop to check for updates on a given interval.</div></div>",601:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype601\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> StopLoop()</div><div class=\"TTSummary\">Stops the SparkleUpdater background loop. Called automatically by Dispose().</div></div>",602:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype602\" class=\"NDPrototype NoParameterForm\">~SparkleUpdater()</div><div class=\"TTSummary\">Finalizer</div></div>",603:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype603\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> Dispose()</div><div class=\"TTSummary\">Inherited from IDisposable. Stops all background activities.</div></div>",604:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype604\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> Dispose(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">disposing</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Dispose of managed and unmanaged resources</div></div>",605:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype605\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> UnregisterEvents()</div><div class=\"TTSummary\">Unregisters events so that we don\'t call events more often than we should</div></div>",606:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype606\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected async</span> Task&lt;UpdateInfo&gt; GetUpdateStatus(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Configuration&nbsp;</td><td class=\"PName last\">config</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This method checks if an update is required. During this process the appcast will be downloaded and checked against the reference assembly. Ensure that the calling process has read access to the reference assembly.&nbsp; This method is also called from the background loops.</div></div>",607:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype607\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> ShowUpdateNeededUI(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;AppCastItem&gt;&nbsp;</td><td class=\"PName\">updates,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">isUpdateAlreadyDownloaded&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Shows the update needed UI with the given set of updates.</div></div>",608:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype608\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public void</span> ShowUpdateNeededUI(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">isUpdateAlreadyDownloaded&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Shows the update UI with the latest downloaded update information.</div></div>",609:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype609\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> OnToastClick(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;AppCastItem&gt;&nbsp;</td><td class=\"PName last\">updates</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",610:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype610\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> ShowUpdateAvailableWindow(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;AppCastItem&gt;&nbsp;</td><td class=\"PName\">updates,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">isUpdateAlreadyDownloaded&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",611:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype611\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public async</span> Task&lt;<span class=\"SHKeyword\">string</span>&gt; GetDownloadPathForAppCastItem(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AppCastItem&nbsp;</td><td class=\"PName last\">item</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Get the download path for a given app cast item.&nbsp; If any directories need to be created, this function will create those directories.</div></div>",612:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype612\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public async</span> Task InitAndBeginDownload(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AppCastItem&nbsp;</td><td class=\"PName last\">item</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Starts the download process by grabbing the download path for the app cast item (asynchronous so that it can get the server\'s download name in case there is a redirect; cancel this by setting CheckServerFileName to false), then beginning the download process if the download file doesn\'t already exist</div></div>",613:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype613\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> OnDownloadProgressChanged(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">ItemDownloadProgressEventArgs&nbsp;</td><td class=\"PName last\">args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",614:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype614\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> CleanUpUpdateDownloader()</div></div>",615:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype615\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private void</span> CreateUpdateDownloaderIfNeeded()</div></div>",616:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype616\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> CreateAndShowProgressWindow(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AppCastItem&nbsp;</td><td class=\"PName last\">castItem,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">shouldShowAsDownloadedAlready</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",617:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype617\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private async void</span> ProgressWindowCompleted(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">DownloadInstallEventArgs&nbsp;</td><td class=\"PName last\">args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",618:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype618\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> OnDownloadFinished(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">AsyncCompletedEventArgs&nbsp;</td><td class=\"PName last\">e</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Called when the installer is downloaded</div></div>",619:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype619\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public async void</span> InstallUpdate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AppCastItem&nbsp;</td><td class=\"PName\">item,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">installPath&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Run the provided app cast item update regardless of what else is going on.&nbsp; Note that a more up to date download may be taking place, so if you don\'t want to run a potentially out-of-date installer, don\'t use this. This should only be used if your user wants to update before another update has been installed AND the file is already downloaded.&nbsp; This function will verify that the file exists and that the DSA signature is valid before running. It will also utilize the PreparingToExit event to ensure that the application can close.</div></div>",620:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype620\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public bool</span> IsDownloadingItem(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">AppCastItem&nbsp;</td><td class=\"PName last\">item</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Checks to see</div></div>",621:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype621\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private bool</span> IsDownloadingSilently()</div><div class=\"TTSummary\">True if the user has silent updates enabled; false otherwise.</div></div>",622:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype622\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected bool</span> DoExtensionsMatch(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">extension,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">otherExtension</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Checks to see if two extensions match (this is basically just a convenient string comparison). Both extensions should include the initial . (full-stop/period) in the extension.</div></div>",623:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype623\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> GetWindowsInstallerCommand(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">downloadFilePath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Get the install command for the file at the given path. Figures out which command to use based on the download file path\'s file extension.&nbsp; Currently supports .exe, .msi, and .msp.</div></div>",624:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype624\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> GetInstallerCommand(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">downloadFilePath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Get the install command for the file at the given path. Figures out which command to use based on the download file path\'s file extension.</div></div>",625:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype625\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private bool</span> IsZipDownload(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">downloadFilePath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",626:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype626\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual async</span> Task RunDownloadedInstaller(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">downloadFilePath</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Updates the application via the file at the given path. Figures out which command needs to be run, sets up the application so that it will start the downloaded file once the main application stops, and then waits to start the downloaded update.</div></div>",627:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype627\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public async</span> Task QuitApplication()</div><div class=\"TTSummary\">Quits the application (host application) that is using/started SparkleUpdater</div></div>",628:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype628\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private async</span> Task&lt;<span class=\"SHKeyword\">bool</span>&gt; AskApplicationToSafelyCloseUp()</div><div class=\"TTSummary\">Ask the application to close their current work items.&nbsp; Apps may need, for example, to let the user save their work</div></div>",629:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype629\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public async</span> Task&lt;UpdateInfo&gt; CheckForUpdatesAtUserRequest()</div><div class=\"TTSummary\">Check for updates, using UI interaction appropriate for if the user initiated the update request</div></div>",630:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype630\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> CheckingForUpdatesWindow_Closing(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">EventArgs&nbsp;</td><td class=\"PName last\">e</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",631:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype631\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public async</span> Task&lt;UpdateInfo&gt; CheckForUpdatesQuietly()</div><div class=\"TTSummary\">Check for updates, using interaction appropriate for where the user doesn\'t know you\'re doing it, so be polite.&nbsp; Basically, this checks for updates without showing a UI. However, if a UIFactory is set and an update is found, an update UI will be shown!</div></div>",632:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype632\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">private async</span> Task&lt;UpdateInfo&gt; CheckForUpdates()</div><div class=\"TTSummary\">Perform a one-time check for updates</div></div>",633:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype633\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">public void</span> CancelFileDownload()</div><div class=\"TTSummary\">Cancels an in-progress download of an app cast file and deletes the temporary file.</div></div>",634:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype634\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> CallFuncConsideringUIThreads(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Action&nbsp;</td><td class=\"PName last\">action</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Events should always be fired on the thread that started the Sparkle object.&nbsp; Used for events that are fired after coming from an update available window or the download progress window.&nbsp; Basically, if ShowsUIOnMainThread is true, just invokes the action. Otherwise, uses the&nbsp; to call the action. Ensures that the action is always on the main thread.</div></div>",635:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype635\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private async</span> Task CallFuncConsideringUIThreadsAsync(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Func&lt;Task&gt;&nbsp;</td><td class=\"PName last\">action</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Events should always be fired on the thread that started the Sparkle object.&nbsp; Used for events that are fired after coming from an update available window or the download progress window.&nbsp; Basically, if ShowsUIOnMainThread is true, just invokes the action. Otherwise, uses the&nbsp; to call the action. Ensures that the action is always on the main thread.</div></div>",636:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype636\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private async void</span> OnUserWindowUserResponded(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">UpdateResponseEventArgs&nbsp;</td><td class=\"PName last\">args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div>",637:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype637\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private async void</span> OnWorkerDoWork(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">DoWorkEventArgs&nbsp;</td><td class=\"PName last\">e</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Loop that occasionally checks for updates for the running application</div></div>",638:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype638\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private void</span> OnWorkerProgressChanged(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">sender,</td></tr><tr><td class=\"PType first\">ProgressChangedEventArgs&nbsp;</td><td class=\"PName last\">e</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">This method will be notified by the SparkleUpdater loop when some update info has been downloaded. If the info has been downloaded fully (e.ProgressPercentage == 1), the UI for downloading updates will be shown (if not downloading silently) or the download will be performed (if downloading silently).</div></div>",639:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype639\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private async void</span> UpdatesHaveBeenDownloaded(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">List&lt;AppCastItem&gt;&nbsp;</td><td class=\"PName last\">updates</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Updates from appcast have been downloaded from the server</div></div>"});